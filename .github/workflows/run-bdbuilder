#!/usr/bin/env node

const _path = require("path");
const _cp = require("child_process");
const _fs = require("fs");

const changedFilesIgnore = [
  "bdbuilder",
  "scripts",
  "UserBirthdays"
];
const releaseExtensions = [".md", ".plugin.js", "assets"];

const argv = process.argv.slice(2);

// supported: `trigger`, `plugin`.
const cliSwitches = Object.assign(...argv.filter(arg => arg.startsWith("--")).map(arg =>
  ({ [arg.slice(2, arg.indexOf("="))]: arg.slice(1 + arg.indexOf("=")) })
));

const isManualRun = "workflow_dispatch" === cliSwitches.trigger;
const changedFiles = argv.filter(arg => !arg.startsWith("--"));

let changedPlugins;
if (isManualRun)
  changedPlugins = cliSwitches.plugin ? [cliSwitches.plugin] : _fs.readdirSync(".");
else
  changedPlugins = [...new Set(changedFiles.map(filename => filename.split(_path.sep)[0]))];

// filter out what can't actually be built.
changedPlugins = changedPlugins.filter(pluginName =>
  "." !== pluginName[0] &&
  !changedFilesIgnore.includes(pluginName) &&
  _fs.existsSync(_path.resolve(pluginName, "package.json")) &&
  _fs.statSync(pluginName).isDirectory()
);

console.log("Will build the following plugins:", changedPlugins.join(", "));
actuallyDoSomething();

function actuallyDoSomething() {
  if (!changedPlugins.length) throw new Error("Got nothing to build");

  for (const pluginName of changedPlugins) {
    buildPlugin(pluginName);
  }

  cleanup();
}

function buildPlugin(pluginName) {
  console.log(`Building ${pluginName}...`);

  _cp.execSync("npm i", {
    cwd: pluginName,
    stdio: ["ignore", "inherit", "inherit"]
  });

  _cp.execSync(`npm exec -- bdbuilder --plugin="${pluginName}" --build --config=bdbuilder.prod.config.json`, {
    cwd: ".",
    stdio: ["ignore", "inherit", "inherit"]
  });
}

/**
 * Leaves only files that should be pushed to the release branch.
 * Probably shouldn't run this at home.
 */
function cleanup() {
  _fs.readdirSync(".").filter(dirname => !changedPlugins.includes(dirname)).forEach(dirname => {
    _fs.rmSync(dirname, { force: true, recursive: true });
  });

  for (const pluginName of changedPlugins) {
    _fs.readdirSync(pluginName).filter(filename =>
      !releaseExtensions.some(extension => filename.endsWith(extension))
    ).forEach(filename => {
      _fs.rmSync(_path.resolve(pluginName, filename), { force: true, recursive: true });
    });
  }
}
